{
    "title": "Deploying backend on Cloud using Systemd",
    "created": 1564681448,
    "updated": 1565106864,
    "author": "Anjan Roy",
    "email": "anjanroy@yandex.com",
    "content": [
        "Well this is my very first blog post, so I'm pretty excited <big>&#x1f600</big>",
        "<br><br>",
        "In this article we're going to talk about something pretty simple, <strong>How to deploy backend on Cloud using systemd ?</strong>",
        "As backend we're going to consider this website, which is my personal website & also fully <big>O</big>pen source, running on <big>L</big>inux.",
        "<br><br>",
        "Source Code : <a href='https://github.com/itzmeanjan/itzmeanjan.in' class='simpleLink' target='_blank'>here</a>",
        "<br><br>",
        "Though this website's backend is made of <big>N</big>odeJS & <big>E</big>xpressJS,",
        "you may consider building your own instance using <big>G</big>o/ <big>P</big>ython/ <big>R</big>uby on Rails/ <big>D</big>art or something else.",
        "And as cloud provider I'm choosing <big>A</big>WS <big>L</big>ightSail, which has got pretty straight forward set up guideline(s).",
        "Feel free to use your favourite one.",
        "<br><br>",
        "You may have already understood, I'm interested in using <big>S</big>ystemd service",
        "for keeping backend up & running even after I logout of system.",
        "This use case may be more appropriate where we can log into Virtual Private Server ( <big>V</big>PS ) instance, running on Cloud, using <big>S</big>SH client, ",
        " install program(s)/ application(s) as per our need & <big>A</big>WS <big>L</big>ightSail is something like that. Generally we'll be allocated with two IP addresses, ",
        "<br><br>",
        "i > Private IP Address",
        "<br>",
        "ii > Public IP Address",
        "<br><br>",
        "So your backend will be visible to <big>I</big>nternet via <big>2</big><sup>nd</sup> one. If",
        " you're interested in attaching a domain name with your Public IP address, you can manage so using <big>D</big>NS Zone(s). ",
        "<br><br>",
        "Time to deploy backend ...",
        "<br><br>",
        "Talking about putting codebase on VPS, you can simply run,",
        "<div class='codeBlock'>",
        "$ git clone https://github.com/itzmeanjan/itzmeanjan.in.git",
        "</div>",
        "after logging into VPS console via <big>S</big>SH <small>( make sure you update <big>U</big>RL in previous command )</small>.",
        "I'm assuming you've already installed all required dependencies, on VPS OS.",
        "If not, please be kind enough to do so.",
        "<br><br>",
        "If you've cloned <a href='https://github.com/itzmeanjan/itzmeanjan.in' class='simpleLink' target='_blank'>this</a> repository,",
        "you may have found a directory named, <small>./systemd</small>,",
        "which holds some <small class='highlight'>systemd.service</small> files, which are required to be edited before deployment.",
        "Otherwise you've to write your own <small class='highlight'>systemd.service</small> files.",
        "<br><br>",
        "In <small class='highlight'>systemd.service</small> file, there'll be generally 3 sections.",
        "<br><br>",
        "i > Unit",
        "<br>",
        "ii > Service",
        "<br>",
        "iii > Install",
        "<br><br>",
        "<big>U</big>nit section holds <small>description</small> & <small>dependency(ies)</small> of service, which is written as follows",
        "<div class='codeBlock'>",
        "[Unit]",
        "<br>",
        "Description=Backend keeper service",
        "</div>",
        "If we had to run our service in periodic fashion or at a certain instance of time in near future,",
        "we had to write one <small class='highlight'>systemd.timer</small> file <small>( which is to be done pretty soon )</small>",
        "& add that one as <small class='highlight'>Wants</small> dependency of this Unit file.",
        "<br><br>",
        "Lets add <big>S</big>ervice declaration, to our <small class='highlight'>systemd.service</small> file.",
        "<br>",
        "<div class='codeBlock'>",
        "[Service]",
        "<br>",
        "User=itzmeanjan",
        "<br>",
        "WorkingDirectory=current-working-directory",
        "<br>",
        "ExecStart=/usr/bin/node path_to_index.js",
        "<br>",
        "Restart=always",
        "</div>",
        "Running following command in your VPS console, will give you content of <big>U</big>ser field",
        "<div class='codeBlock'>",
        "$ echo $USER",
        "</div>",
        "We're going to run main script ( which is powering up backend ) i.e. <small class='highlight'>./index.js</small> from root of our project directory.",
        "For that we'll require to set <small class='highlight'>WorkingDirectory</small> field as absolute path to root directory of this project, which can easily be found by using following command on your VPS terminal.",
        "<br>",
        "<div class='codeBlock'>",
        "$ pwd # when you're present in root directory of project",
        "</div>",
        "In <small class='highlight'>ExecStart</small> field, we'll put the actual shell command to be executed by this service,",
        "which will be as following.",
        "<br>",
        "<div class='codeBlock'>",
        "$ /usr/bin/node /absolute/path/to/index.js",
        "</div>",
        "As per your use case, <small class='highlight'>ExecStart</small> can be different command. But make sure you put absolute path to any executable or script, you use.",
        "Absolute installation path of <big>N</big>ode executable can be found this way",
        "<br>",
        "<div class='codeBlock'>",
        "$ whereis node # update `node` with any other name, for which you want to find installation path",
        "</div>",
        "Last but not least, in <small class='highlight'>Restart</small> field, I've set <small class='highlight'>always</small>, so that if by chance backend catches some error & fails, it starts up again.",
        "<br><br>",
        "In <small>[Install]</small> declaration, we need to add one field <small class='highlight'>WantedBy</small>, which is set as <small class='highlight'>multi-user.target</small>,",
        "to be required for enabling this service, so that even after system reboot(s), service will again start.",
        "<br>",
        "<div class='codeBlock'>",
        "[Install]",
        "<br>",
        "WantedBy=multi-user.target",
        "</div>",
        "Complete <small class='highlight'>systemd.service</small> file, let's name it <small class='highlight'>myBackEnd.service</small>, should look like",
        "<br>",
        "<div class='codeBlock'>",
        "[Unit]",
        "<br>",
        "Description=Backend keeper service",
        "<br><br>",
        "[Service]",
        "<br>",
        "User=user",
        "<br>",
        "WorkingDirectory=current-working-directory",
        "<br>",
        "ExecStart=/usr/bin/node path_to_index.js",
        "<br>",
        "Restart=always",
        "<br><br>",
        "[Install]",
        "<br>",
        "WantedBy=multi-user.target",
        "</div>",
        "Now service file is complete, time to put it in proper directory, so that <small class='highlight'>systemd</small> can find it out easily.",
        "Move this service file to <small class='highlight'>/etc/systemd/system/</small>.",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo mv myBackEnd.service /etc/systemd/system/",
        "</div>",
        "We need to reload systemd daemon, so that it can actually find just created service file(s).",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl daemon-reload",
        "</div>",
        "Now we'll enable <small class='highlight'>myBackEnd.service</small>, so that it can start itself up, even after system reboot(s).",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl enable myBackEnd.service",
        "</div>",
        "You may disable it anytime, by just replacing <small class='highlight'>enable</small> with <small class='highlight'>disable</small>, in above shell command.",
        "<br><br>",
        "Lets start this service, so that backend keeps running",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl start myBackEnd.service",
        "</div>",
        "Check out running status of this service",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl status myBackEnd.service",
        "</div>",
        "If you wish to stop this service",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl stop myBackEnd.service",
        "</div>",
        "If you've taken a look at <small class='highlight'>./index.js</small>, you may have already seen, we're running this backend on port number 8000.",
        "Running a backend service on a previleged port is not a good decision, because that'll require root access.",
        "But I'd like to get my backend's traffic flowing in & out via port 80, while keeping backend running on unprivileged port 8000.",
        "So there's one easy way out, forwarding port 80's traffic to port 8000.",
        "<br><br>",
        "Let's add one <small class='highlight'>iptables</small> redirection rule, so that Linux Kernel can forward packets coming in via port 80 to port 8000.",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000",
        "</div>",
        "But if you apply this rule in your local development machine, you simply can't get to use",
        "<br>",
        "<div class='codeBlock'>",
        "$ curl localhost:80",
        "</div>",
        "rather <small class='highlight'>cURL</small>ing port 8000 will work as expected, which denotes this rule can forward packets coming from any host other than this one, on port 80.",
        "<br><br>",
        "May be someday later you'll be interested in removing this rule, running following one in your VPS console, will ensure packets coming in via port 80, are no more forwarded to port 8000.",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo iptables -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000",
        "</div>",
        "Feel free to check out <small class='highlight'>iptables</small> help.",
        "<br>",
        "<div class='codeBlock'>",
        "$ man iptables",
        "</div>",
        "Now you're running your backend on port 8000 & it's accessible to other hosts via port 80, which ensures your backend running host can be accessed via",
        "<br>",
        "<div class='codeBlock'>",
        "$ curl http://public-ip-of-your-VPS-host",
        "</div>",
        "Now I'll talk about another thing, <strong>Running a GitHub repositories page parser in periodic fashion</strong>, on your VPS machine, so that a certain page in updated daily ( automatically ).",
        "If you visit <a class='simpleLink' href='/projects'>Projects</a> page of this website, you may find something pretty similar to GitHub repositores page, which shows my opensource works.",
        "This list is updated every 24h, by running a <small class='highlight'>systemd</small> task.",
        "For that we'll require to add one <small class='highlight'>systemd.timer</small> file & one <small class='highlight'>systemd.service</small> file, on that timer trigger, service file will run its task, much like a Linux cron job.",
        "<br><br>",
        "Let's create a <small class='highlight'>systemd.service</small> file & place it at <small class='highlight'>./sytemd/githubParser.service</small>.",
        "In <big>U</big>nit section, we'll require to add one <big>W</big>ants dependency ( a loose dependency ), for to be created <small class='highlight'>./sytemd/githubParser.timer</small> file.",
        "<br>",
        "<div class='codeBlock'>",
        "[Unit]",
        "<br>",
        "Description=Periodic Github repository details extractor",
        "<br>",
        "Wants=githubParser.timer",
        "</div>",
        "Under <big>S</big>ervice section, same as we did in <small class='highlight'>systemd.service</small> file for backend, except <big>R</big>estart field,",
        "because here we don't want our service to be running always, it must run at a certain timer trigger i.e. after a certain amount of time in periodic fashion.",
        "<br>",
        "<div class='codeBlock'>",
        "[Service]",
        "<br>",
        "User=itzmeanjan",
        "<br>",
        "WorkingDirectory=current-working-directory",
        "<br>",
        "ExecStart=/usr/bin/python3 /absolute-path-to/project_extractor.py",
        "</div>",
        "If you're not sure about your python installation location, try finding so, by running following one on your VPS console.",
        "<br>",
        "<div class='codeBlock'>",
        "$ whereis python3",
        "</div>",
        "And in <big>I</big>nstall section, everything stays as it was, in previous case.",
        "You may find an example <a class='simpleLink' href='https://github.com/itzmeanjan/itzmeanjan.in/blob/master/systemd/githubParser.service'>here</a>.",
        "<br><br>",
        "Let's create remaining <small class='highlight'>./systemd/githubParser.timer</small> file, for running service using timer trigger.",
        "In <big>U</big>nit section, one strong dependency to be added using <big>R</big>equires field, which will make sure as soon as this timer is enabled, mentioned service file also gets activated.",
        "<br>",
        "<div class='codeBlock'>",
        "[Unit]",
        "<br>",
        "Description=Periodic Github repository details extractor",
        "<br>",
        "Requires=githubParser.service",
        "</div>",
        "In <small class='highlight'>systemd.timer</small> files, we need to declare a <big>T</big>imer section, which looks like following one.",
        "<br>",
        "<div class='codeBlock'>",
        "[Timer]",
        "<br>",
        "Unit=githubParser.service",
        "<br>",
        "OnUnitActiveSec=24h",
        "</div>",
        "<big>O</big>nUnitActiveSec field will ensure that mentioned <big>U</big>nit file is run, 24h after last execution of service file i.e. run that service file every 24h.",
        "In <big>I</big>nstall section, we'll make this <small class='highlight'>systemd.timer</small> file <big>W</big>antedBy, <small class='highlight'>timers.target</small>.",
        "<br>",
        "<div class='codeBlock'>",
        "[Install]",
        "<br>",
        "WantedBy=timers.target",
        "</div>",
        "You may follow <a class='simpleLink' href='https://github.com/itzmeanjan/itzmeanjan.in/blob/master/systemd/githubParser.timer'>this</a>, as an example.",
        "Let's move both of these <small class='highlight'>systemd.service</small> & <small class='highlight'>systemd.timer</small> files to <small class='highlight'>/etc/systemd/system/</small>.",
        "Then a systemd reload is required. Enabling <small class='highlight'>githubParser.timer</small>, will run <small class='highlight'>githubParser.service</small> immediately & ensure it invokes same after 24h.",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl enable githubParser.timer",
        "</div>",
        "You may check status of this timer using",
        "<br>",
        "<div class='codeBlock'>",
        "$ sudo systemctl status githubParser.timer",
        "</div>",
        "Consider checking out code for GitHub Project Extractor <a class='simpleLink' href='https://github.com/itzmeanjan/itzmeanjan.in/blob/master/project_extractor.py'>here</a>.",
        "<br><br>",
        "Well that's it. See you in another article :)"
    ]
}